# This is a quick introduction to the basics of using pygad to read in simulation snapshots, as well as a couple of functions I use to keep track of gas particles in the simulation

# For a more thorough introduction to pygad, check out the documentation at https://bitbucket.org/broett/pygad/downloads/, especially the quickstart jupyter notebook

# First import pygad, numpy (which has nice functions for manipulating arrays of data), and matplotlib, which allows us to make figures

import pygad
import pygad.plotting
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import read_snap #ignore for now
import matplotlib.gridspec as gridspec

# Set which galaxy you want to look at (these have names like m0053, m0163, etc. For gal, you can just use the number, 53, 163, etc.) at which snapshot

gal = 175
snapmin = 10
snap = range(snapmin,95)

#snap = list(range(11,12)) # use this when you want to test 2 snapshots instead of run the code on all of them



# This path directs to a folder on mhaas which contains information about the galaxy, specificially the coordinates of its center, its virial radius and its virial mass at each snapshot

path = '/Users/brennan/Documents/winds_analysis/gifs/m0'+str(gal).zfill(3)+'/'

# Read in the files with these values as arrays 

centerarray = np.loadtxt(path+'centers.txt')
mvirarray = np.loadtxt(path+'mvirs.txt')
rvirarray = np.loadtxt(path+'rvirs.txt')


# We have used two different halo finders to find the centers of our galaxies, and sometimes one is more accurate than the other. the centers in the above file are either generated by "Rockstar" or "gtrace", and the file format is a little bit different between the two. for this reason, there's a condition in the code depending on whether the center was found with rockstar or gtrace

#centertype = 'rockstar'

#OR

centertype = 'gtrace'


# This finds the virial radius and virial mass for each snapshot

for i in snap:

    if centertype == 'rockstar':
        padding = 95 - len(centerarray)
        rvir = rvirarray[i - padding]
        mvir = mvirarray[i - padding]

    if centertype == 'gtrace':
        rvir = rvirarray[i - snapmin + 1]
        mvir = mvirarray[i - snapmin + 1]
    
    virial_mass = mvir/10**12
    virial_mass = round(virial_mass,3)

    s = read_snap.read_snap(gal, i, snapmin, 'MrAGN', centerarray, rvirarray, centertype)

# Use the first line if you want color bar and second line if you don't want color bar                                                                                               

    fig, ax, im, cbar =  pygad.plotting.image(s.gas, extent='500 kpc', clim=[10**4.0,10**7.0])                                                                                      
 #   fig, ax, im, cbar = pygad.plotting.image(s.stars, extent='200 kpc')
 #   fig, ax, cbar =  pygad.plotting.image(s.gas, extent='2000 kpc', clim=[4,7], showcbar=False)

# This adds the virial radius circle and another circle indicating how large the galaxy is

    circle1=plt.Circle((0,0), rvir, color='white', fill=False)
    circle2=plt.Circle((0,0), 0.1*rvir, color='white', fill=False, linestyle='dashed')
    ax.add_artist(circle1)
    ax.add_artist(circle2)
    ax.set_title(r'm0'+str(gal).zfill(3)+'              $M_{vir}=$'+str(virial_mass)+' x $10^{12}  M_{\odot}$')

# This adds snapshots to their respective redshift folders (only for z=0, z=1, and z=2)

    if i==27:
        plt.savefig('./z=2/ZI_gasmap_m0'+str(gal).zfill(3)+'_snap_'+str(i).zfill(3)+'.png')
    if i==44:
        plt.savefig('./z=1/ZI_gasmap_m0'+str(gal).zfill(3)+'_snap_'+str(i).zfill(3)+'.png')
    if i==94:
        plt.savefig('./z=0/ZI_gasmap_m0'+str(gal).zfill(3)+'_snap_'+str(i).zfill(3)+'.png')

    plt.savefig('./m0'+str(gal).zfill(3)+'/test_gasmap_m0'+str(gal).zfill(3)+'_snap_'+str(i).zfill(3)+'.png')
    plt.close()





#"snapmin" above refers to the first snapshot in which the halo finder finds a reliable center.  The file gal4.txt in /Users/brennan/Documents/winds_analysis/ gives in each row the name of the galaxy, snapmin, snapmax (which is the end of the simulation for all of the galaxies), plottype (which you don't have to worry about) and centertype (which will be either rockstar or gtrace)

#---------------ignore this dotted line for now--------------------------------

#this finds the center for the given snapshot

""" if centertype == 'rockstar':
        padding = 95 - len(centerarray)
        center = centerarray[i - padding]
        

    if centertype == 'gtrace':
        center = centerarray[i - snapmin + 1]
        
#this is the pygad function to read in the snapshot

    s = pygad.Snap('/Volumes/G-RAID/Choi16_Fiducial/Fiducial_MrAGN/m0'+str(gal).zfill(3)+'/snap_m0'+str(gal).zfill(3)+'_sf_x_2x_'+str(i).zfill(3), load_double_prec=True)

#this converts all of the quantities with factors of the hubble constant and the scale factor to physical units

    s.to_physical_units()

#Here we center the positions and velocities on the center that we established above

    pygad.Translation(-center).apply(s)

    vel_center = pygad.analysis.mass_weighted_mean(s.stars[pygad.BallMask('1 kpc', center=pygad.UnitArr([0.0, 0.0, 0.0], 'kpc'))], 'vel')

    s['vel'] -= vel_center"""

#------------------------------------------------------------------------------

#the reason for the dotted lines (and the reason that I loaded in the virial radius and the centers separately), is because everything between the two dotted lines can be done just by using a function that I wrote called read_snap. I still wanted you to see how pygad natively reads snapshots, though. In order to use the function, just put read_snap.py in the same directory as your code

#Everything between the dotted lines can be achieved by importing read_snap at the beginning of the file and then in place of the code within the dotted lines:

    #s = read_snap.read_snap(gal, i, snapmin, 'MrAGN', centerarray, rvirarray, centertype)

#once the snapshot is read in, you can access basically any quantity you want using the syntax s.(particle_type)['quantity']

#so if you want an array of gas particle masses:

   # s.gas['mass']

#or stellar particle ID numbers

    #s.stars['ID']

#the other particle types are dark matter (s.dm) and black holes (s.bh)

#you can check what's available with s.gas.available_blocks(), or s.stars.available_blocks(), etc.

#some common ones are ['ID'] (Particle ID), ['mass'] (mass in solar masses), ['temp'] (temperature in Kelvin), ['r'] (radial position)

#plotting images of snapshots is very easy, and if you want a temperature map is as easy as

   # pygad.plotting.image(s.gas, clim=[np.log10(0.01), np.log10(9)])
   # pygad.plotting.image(s.gas, extent='100 kpc', clim=[4.0, 7.0])
   # pygad.plotting.image(s.gas)
#    pygad.plotting.image(s.gas, extent=str(4*rvir)+' kpc', clim=[10**4.0, 10**7.0])
#plt.title('m0'+str(gal).zfill(3+'_snap_'+str(snap).zfill(3))
#plt.show()
  #  plt.title('m0'+str(gal))
 #   plt.savefig('./m0'+str(gal)+'/gasmap_m0'+str(gal).zfill(3)+'_snap_'+str(i).zfill(3)+'.png')
#plt.savefig('./gasmap.png')

#there are many more plotting options that you can find in the quickstart jupyter notebook linked above

#finally, there's a function that has come in handy for me when it comes to particle tracking, which you may eventually find very useful

#say there are a bunch of particles at redshift zero that you're interested in because they're special in some way (like they have high temperatures, or they're very near the black hole). let's call the ID list of those particles special_ids_z0. Now you want to see where those particles were at z=2, so you need the radii of particles at z=2 whose IDs are in your special_ids_z0 list

#If you read in your redshift 2 snapshot, then this can be accomplished with:

#read_snap.check_in(s.gas['r'], s.gas['ID'], special_ids_z0)

#This function takes three arguments: the first argument is the quantity you're interested in, the second is the IDs associated with the particles in the first argument, and the last argument is the list of IDs you're checking against to find the particles you care about

#If you want the radii of all the particles that are NOT in special_ids_z0, then use

#read_snap.check_notin(s.gas['r'], s.gas['ID'], special_ids_z0)

#If any of this is completely confusing just let me know (my email is brennan@physics.rutgers.edu), or if I'm in the office you can find me in room 332.

